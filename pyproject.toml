[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "hades"
version = "0.1.0"
description = "A procedurally generated bullet bullet-hell dungeon crawler made in Python."
authors = ["Aspect1103 <jack.ashwell1@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Aspect1103/Hades"
repository = "https://github.com/Aspect1103/Hades"

[tool.poetry.dependencies]
python = "^3.10"
arcade = "3.0.0.dev25"

[tool.poetry.dev-dependencies]
black = "23.11.0"
mypy = "1.7.0"
nuitka = "1.8.6"
ordered-set = "4.1.0"
pre-commit = "3.5.0"
pylint = "3.0.2"
pytest = "7.4.3"
pytest-cov = "4.1.0"
pytest-icdiff = "0.8"
pytest-instafail = "0.5.0"
pytest-randomly = "3.15.0"
pytest-sugar = "0.9.7"
ruff = "0.1.6"
ssort = "v0.11.6"
tox = "4.11.3"

[tool.black]
preview = true
target_version = ["py311"]

[tool.coverage.paths]
source = [
    "src",  # Run coverage on the entire project
    ".tox/*/Lib/site-packages",  # Make sure the project is being covered on Windows
    ".tox/*/lib/*/site-packages",  # Make sure the project is being covered on Linux
]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",  # Exclude all type checking imports
    "pragma: no cover",  # Exclude all no cover blocks
    "raise NotImplementedError",  # Exclude all base functions
    "if __name__ == .__main__.:",  # Exclude script definitions
]
omit = [
    "build.py",  # Build.py is only used for building the project
    "*/__main__.py",  # This is only used for running the game via the CLI
]
precision = 2
show_missing = true

[tool.coverage.run]
branch = true
source = ["hades"]

# Todo: Once Arcade is typed, review this
[tool.mypy]
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = true
disallow_any_unimported = true
exclude = [
    "build.py",  # Setuptools is untyped so we need to ignore it
    "src/hades/views/start_menu.py",  # TODO: ONCE VIEWS ARE REDONE, REMOVE THIS
    "src/hades/views/inventory.py",  # TODO: ONCE VIEWS ARE REDONE, REMOVE THIS
    "src/hades/views/shop.py",  # TODO: ONCE VIEWS ARE REDONE, REMOVE THIS
]
ignore_missing_imports = true
pretty = true
python_version = "3.10"
show_column_numbers = true
show_error_code_links = true
show_error_context = true
show_error_end = true
strict = true
warn_unreachable = true
warn_unused_configs = true

# TODO: Once Ruff implements all of Pylint's rules, switch Pylint out for Ruff
[tool.pylint."BASIC"]
good-names = "i,j,k,x,y,a,b,dx,dy,x1,x2,y1,y2"

[tool.pylint."FORMAT"]
max-line-length = 88

[tool.pylint."MASTER"]
load-plugins = [
    "pylint.extensions.bad_builtin",  # Disallow the use of deprecated builtin functions
    "pylint.extensions.check_elif",  # Disallow the use of following an else statement with an if
    "pylint.extensions.code_style",  # Disallow code that reduces code consistency
    "pylint.extensions.comparison_placement",  # Disallow placing the constant on the left of the comparison
    "pylint.extensions.confusing_elif",  # Disallow placing an elif after an indented block (could be hard to understand)
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",  # Disallow spreading multiple assignment statements across if/else blocks
    "pylint.extensions.dunder",  # Disallow mispelled dunder methods
#    "pylint.extensions.emptystring",  # Disallow comparisons to empty strings
    "pylint.extensions.eq_without_hash",  # Disallow implementing __eq__ without __hash__
    "pylint.extensions.for_any_all",  # Disallow using a for loop to check for a condition and return a bool
    "pylint.extensions.magic_value",  # Disallow using magic values
    "pylint.extensions.no_self_use",  # Disallow methods which don't use their bound instance
    "pylint.extensions.overlapping_exceptions",  # Disallow overlapping exceptions
    "pylint.extensions.private_import",  # Disallow private imports
    "pylint.extensions.redefined_loop_name",  # Disallow redefining loop variables
    "pylint.extensions.redefined_variable_type",  # Disallow redefining variable types
    "pylint.extensions.set_membership",  # Disallow not using sets for membership tests
    "pylint.extensions.typing",  # Disallow bad typing
    "pylint.extensions.code_style",  # Disallow code that reduces code consistency
]

[tool.pylint."MESSAGES CONTROL"]
enable = [
    "bad-inline-option",  # Disallow badly formatted options
    "deprecated-pragma",  # Disallow deprecated pragrams for renamed options
    "file-ignored",  # Disallow messages to inform that files won't be checked
    "use-symbolic-message-instead",  # Disallow messages enabled/disabled by ID
    "useless-suppression",  # Disallow disabled messages when they aren't triggered
    "prefer-typing-namedtuple", # Enforce typing.NamedTuple over collections.namedtuple
]
include-naming-hint = true
disable = [
    "attribute-defined-outside-init",  # Allow attributes being defined outside __init__ (sometimes this needs to happen)
    "import-error",  # Sometimes pylint can't import a package correctly
    "magic-value-comparison",  # Stop Pylint complaining about the tests
    "no-else-return",  # Allow else statement after a return
    "no-member",  # Allow BaseView to set the window attribute
    "no-name-in-module",  # Pylint can't infer imports from the extensions
    "redefined-outer-name",  # Allow redefining outer names (this is used in pytest)
    "too-few-public-methods",  # Stop Pylint complaining about too few public methods
    "too-many-arguments",  # Stop Pylint complaining about too many parameters
    "too-many-instance-attributes",  # Stop Pylint complaining about too many instance attributes
    "too-many-locals",  # Stop Pylint complaining about too many local variables
    "too-many-lines",  # Stop Pylint complaining about too many lines
    "too-many-statements",  # Stop Pylint complaining about too many statements
]

[tool.pytest.ini_options]
addopts = "-vv -ra --showlocals --cov --cov-report term-missing"
pythonpath = ["src"]
testpaths = ["tests"]

[tool.ruff]
extend-exclude = [
    "src/hades/views/shop.py",  # TODO: ONCE VIEWS ARE REDONE, REMOVE THIS
    "src/hades/views/inventory.py",  # TODO: ONCE VIEWS ARE REDONE, REMOVE THIS
]
extend-ignore = [
    "S311",  # Allow use of the random library
]
output-format = "grouped"
line-length = 88
preview = true
select = [
    "A",  # Enable flake8-builtins
    "ANN",  # Enable flake8-annotations
    "ARG",  # Enable flake8-unused-arguments
    "B",  # Enable flake8-bugbear
    "BLE",  # Enable flake8-blind-except
    "C4",  # Enable flake8-comprehensions
    "C90",  # Enable mccabe
    "COM",  # Enable flake8-commas
    "D",  # Enable pydocstyle
    "DTZ",  # Enable flake8-datetimez
    "E",  # Enable pycodestyle errors
    "EM",  # Enable flake8-errmsg
    "ERA",  # Enable eradicate
    "F",  # Enable Pyflakes
    "FA",  # Enable flake8-future-annotations
    "FBT",  # Enable flake8-boolean-trap
    "FIX", # Enable flake8-fixme
    "FLY",  # Enable flynt
    "G",  # Enable flake8-logging-format
    "I",  # Enable isort
    "ICN",  # Enable flake8-import-conventions
    "INP",  # Enable flake8-no-pep420
    "INT",  # Enable flake8-gettext
    "ISC",  # Enable flake8-implicit-str-concat
    "N",  # Enable pep8-naming
    "PERF",  # Enable Perflint
    "PGH",  # Enable pygrep-hooks
    "PIE",  # Enable flake8-pie
    "PLC",  # Enable Pylint convention
    "PLE",  # Enable Pylint error
    "PLR",  # Enable Pylint refactor
    "PLW",  # Enable Pylint warning
    "PT",  # Enable flake8-pytest-style
    "PTH",  # Enable flake8-use-pathlib
    "PYI",  # Enable flake8-pyi
    "RET",  # Enable flake8-return
    "RSE",  # Enable flake8-raise
    "RUF",  # Enable Ruff-specific rules
    "S",  # Enable flake8-bandit
    "SIM",  # Enable flake8-simplify
    "SLF",  # Enable flake8-self
    "SLOT",  # Enable flake8-slots
    "T20",  # Enable flake8-print
    "TCH",  # Enable flake8-type-checking
    "TD",  # Enable flake8-todos
    "TID",  # Enable flake8-tidy-imports
    "TRY",  # Enable tryceratops
    "UP",  # Enable pyupgrade
    "W",  # Enable pycodestyle warnings
]
show-fixes = true
show-source = true
src = ["src"]

[tool.ruff.per-file-ignores]
"build.py" = [
    "S603",  # Ignore flake8-bandit subprocess with shell=True rule
    "S607",  # Ignore flake8-bandit start process with a partial path rule
    "T201",  # Ignore flake8-print print rule
]
"hades_extensions/*.pyi" = [
    "D100",  # Ignore pydocstyle module docstring rule
    "D101",  # Ignore pydocstyle class docstring rule
    "D103",  # Ignore pydocstyle method docstring rule
    "PIE796",  # Ignore flake8-pie duplicate enum values rule
]
"*test_*" = [
    "PLR2004",  # Ignore pylint-refactor magic number rule for the tests
    "S101",  # Ignore flake8-bandit assert rule for the tests
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = clean, py310, py311, report

[gh-actions]
python =
    3.10: clean, py310, report
    3.11: clean, py311, report

[testenv]
commands =
    python -m build -c
    ls .tox/py310/Lib/site-packages/
    ls .tox/py311/Lib/site-packages/
    pytest --cov-append
deps = pytest-cov
passenv = *
allowlist_externals = ls

[testenv:clean]
commands = coverage erase
deps = pytest-cov

[testenv:report]
commands = coverage lcov
deps = pytest-cov
"""
