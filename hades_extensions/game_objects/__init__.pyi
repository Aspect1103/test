# Builtin
from typing import Final, Self

SPRITE_SCALE: Final = ...
SPRITE_SIZE: Final = ...

class RegistryException(Exception): ...
class ComponentBase: ...

class SystemBase:
    registry: Registry

    def update(self: SystemBase, delta_time: float) -> None: ...

class Vec2d:
    x: float
    y: float

    def __init__(self: Vec2d, x: float, y: float) -> None: ...
    def magnitude(self: Vec2d) -> float: ...
    def normalised(self: Vec2d) -> Vec2d: ...
    def rotated(self: Vec2d, angle: float) -> Vec2d: ...
    def angle_between(self: Vec2d, other: Vec2d) -> float: ...
    def distance_to(self: Vec2d, other: Vec2d) -> float: ...
    def __add__(self: Vec2d, other: Vec2d) -> Vec2d: ...
    def __iadd__(self: Self, other: Vec2d) -> Self: ...
    def __sub__(self: Vec2d, other: Vec2d) -> Vec2d: ...
    def __mul__(self: Vec2d, other: Vec2d) -> Vec2d: ...
    def __truediv__(self: Vec2d, other: Vec2d) -> Vec2d: ...
    def __eq__(self: Vec2d, other: Vec2d) -> bool: ...
    def __ne__(self: Vec2d, other: Vec2d) -> bool: ...
    def __hash__(self: Vec2d) -> int: ...

class KinematicObject:
    position: Vec2d
    velocity: Vec2d
    rotation: float

    def __init__(
        self: KinematicObject,
        position: Vec2d,
        velocity: Vec2d,
        rotation: float,
    ) -> None: ...

class Registry:
    def __init__(self: Registry) -> None: ...
    def create_game_object(
        self: Registry, components: list[ComponentBase], *, kinematic: bool = False,
    ) -> int: ...
    def delete_game_object(self: Registry, game_object_id: int) -> None: ...
    def has_component(
        self: Registry, game_object_id: int, component_type: type[ComponentBase],
    ) -> bool: ...

    def get_component():

    def find_components():

    def add_system(self: Registry, system: SystemBase) -> None: ...

    def find_system(self: Registry):

    def update(self: Registry, delta_time: float) -> None: ...

    def get_kinematic_objects(self: Registry, game_object_id: int) -> KinematicObject: ...

    def add_wall(self: Registry, wall: Vec2d) -> None: ...

    def get_walls(self: Registry) -> set[Vec2d]: ...
